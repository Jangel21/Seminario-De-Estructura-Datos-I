#include <iostream>
#define TAM 50

class persona{
private:
    std::string nombre, carrera;
    int asignaturas;
    float promedio;
public:
    persona(){};
    friend std::ostream & operator<<(std::ostream &O, persona &x){
            O<<"\n     Nombre: "<<x.nombre<<std::endl;
            O<<"\n     Carrera: "<<x.carrera<<std::endl;
            O<<"\n     Asignaturas: "<<x.asignaturas<<std::endl;
            O<<"\n     Promedio: "<<x.promedio<<std::endl;
            return O;
    }
    friend std::istream & operator>>(std::istream &O, persona &x){
            std::cout<<"\n     Nombre: ";
            O>>x.nombre;
            std::cout<<"\n     Carrera: ";
            O>>x.carrera;
            std::cout<<"\n     Asignaturas: ";
            O>>x.asignaturas;
            std::cout<<"\n     Promedio: ";
            O>>x.promedio;
            return O;
    }
    std::string GetName()
    {
        return nombre;
    }
};

//plantillas
template<class T>
class Cola{
private:
    T datos[TAM];
    int ult;
    bool inserta(T , int);
    bool elimina(int);
    T recupera(int)const;
    int primero()const;
    int ultimo()const;
    void imprime()const;
public:
    Cola():ult(-1){}
    bool vacia()const;
    bool llena()const;
    bool Queue(T&);
    bool Dequeue();
    void BusquedaLineal();
    T Front()const;
};

template<class T>
T Cola<T>::Front()const{
    T x=datos[primero()];
    return x;
}

template<class T>
bool Cola<T>::Dequeue(){
    if(vacia()){
        return false;
    }
    else{
        elimina(primero());
    }
    return true;
}

template<class T>
bool Cola<T>::Queue(T& elem){
    if(llena()){
        return false;
    }
    if(vacia()){
        inserta(elem,0);
    }
    else{
        inserta(elem, ultimo()+1);
    }
    return true;
}

template<class T>
void Cola<T>::imprime()const{
    if(!vacia()){
        for(int i=0; i<=ult; i++){
            persona x=datos[i];
            std::cout<<x<<std::endl;
        }
    }
}

template<class T>
bool Cola<T>::vacia()const{
    return ult==-1;
}

template<class T>
bool Cola<T>::llena()const{
    return ult==TAM-1;
}

template<class T>
bool Cola<T>::inserta(T elem, int pos){
    if(llena() || pos<0 || pos>ult+1){
        std::cout<<"\n No se pudo insertar";
        return false;
    }
    int i=ult+1;
    while(i>pos){
        datos[i]=datos[i-1];
        i--;
    }
    datos[pos]=elem;
    ult++;
    return true;
}

template<class T>
bool Cola<T>::elimina(int pos){
    if(vacia() || pos<0 || pos>ult){
        std::cout<<"\n No se pudo eliminar";
        return false;
    }
    int i=pos;
    while(i<ult){
        datos[i]=datos[i+1];
        i++;
    }
    ult--;
    return true;
}

template<class T>
T Cola<T>::recupera(int pos)const{
    if(vacia() || pos<0 || pos>ult-1){
        std::cout<<"\n Insuficiencia de datos";
        //Manejar exceptions
    }
    else{
       return datos[pos];
    }
}

template<class T>
int Cola<T>::primero()const{
    if(vacia()){
       return -1;
    }
    return 0;
}

template<class T>
int Cola<T>::ultimo()const{
    if(vacia()){
       return -1;
    }
    return ult;
}

template<class T>
void Cola<T>::BusquedaLineal()
{
    if(vacia())
    {
        std::cout<<"  \n\t\t BUSQUEDA DE CONSTANCIAS"<<std::endl;
        std::cout<<"\n\n\t\t       Cola vacia";
    }
    else
    {
       persona aux;
       std::cout<<"\n\t\t BUSQUEDA DE CONSTANCIAS"<<std::endl;
       std::string nam, compara;
       int ban = 0;

       std::cout<<"\n     Nombre de la persona a buscar: ";
       std::cin>>nam;

       for(int i = 0; i <ult+1 && ban == 0; i++ )
       {
           aux = persona();
           aux = datos[i];
           compara = aux.GetName();

           if(compara == nam)
           {
                std::cout<<aux;
                if(i==0)
                    std::cout<<"\n     Es la siguiente ha imprimir"<<std::endl;
                else
                    std::cout<<"\n     Faltan "<<i<<" para imprimir esta constancia"<<std::endl;
                ban = 1;
           }

       }

       if(ban!=1)
       {
           std::cout<<"\n     No se encontro "<<nam<<std::endl;
       }
    }
    std::cout<<"\n\n\t\t ";
    system("pause");
}

void inicio()
{
    system("cls");
    system("color F0");
    std::cout<<"\n\t\t _ A L T A    D E    C O N S T A N C I A S _ "<<std::endl;
    std::cout<<"\n\n\t\t\t 1. Dar de alta  \n\n\n\t\t\t 2. Imprimir constancia";
    std::cout<<"\n\n\n\t\t\t 3. Buscar Constancia \n\n\n\t\t\t 4. Salida \n\n\n\t\t\t Seleciona: ";
}

int main()
{
    Cola<persona> MiCola;
    persona x;
    char menu;
    do
    {
    inicio();
    std::cin >> menu;
    switch(menu)
    {
    case '1':
        system("cls");
        std::cout<<"\n\t\t INGRESE LA INFORMACION A DAR DE ALTA"<<std::endl;
        std::cin>>x;
        MiCola.Queue(x);
        break;

    case '2':
        system("cls");
        if(!MiCola.vacia())
        {
            std::cout<<"\n\t\t IMPRESION DE CONSTANCIAS"<<std::endl;
            x=MiCola.Front();
            std::cout<<x<<std::endl;
            MiCola.Dequeue();
            std::cout<<"\n\n\n     ";
            system("pause");
        }
        else
        {
            std::cout<<"\n\t\t IMPRESION DE CONSTANCIAS"<<std::endl;
            std::cout<<"\n\n\t\t       Cola vacia \n\n\n\t\t";
            system("pause");}
        break;

    case '3':
        system("cls");
        MiCola.BusquedaLineal();
        break;

    case '4':
        return 0;
        break;

    default:
        system("cls"); system("color CF");
        std::cout<<"\n\t\t _ A L T A    D E    C O N S T A N C I A S _ "<<std::endl;
        std::cout<<"\n\n\t\t       Introduzca un valor correcto \n\n\n\t\t";
        system("pause");
        break;

    }
    }
    while(menu!=4);
    return 0;
}
