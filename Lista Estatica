 #include <iostream>
 #include <string>
 #define TAM 10

 using namespace std;

 //declaracion de funciones.
 void inicio(int);
 void espacio();

 ///CLASE BASE
 class Mamifero
 {
   private:
     string Animal, Nombre,Nacio;
     int Dia,Mes,Anio;
   public:
    Mamifero();
    Mamifero(string Ani,string Nom,string Nac,int D,int M,int A);
    void ImprimeMamifero();
    void CambiarAnimal();
    void CambiarNombre();
    void CambiarNacimiento();
    void CambiarLugar();
    string ObtieneNombre();

 };

 Mamifero::Mamifero(){}

 Mamifero::Mamifero(string Ani,string Nom,string Nac,int D,int M,int A)
 {
    Animal=Ani;
    Nombre=Nom;
    Nacio=Nac;
    Dia=D;
    Mes=M;
    Anio=A;
 }

 void Mamifero::ImprimeMamifero()
 {
    cout<<"\t Nombre: "<< Nombre<<endl;
    cout<<"\t Raza: "<< Animal<<endl;
    cout<<"\t Dia de nacimiento (dd/mm/aaaa): "<<Dia<<"/"<<Mes<<"/"<<Anio<<endl;
    cout<<"\t Lugar de nacimiento: "<< Nacio<<endl;
 }

 void Mamifero::CambiarAnimal()
 {
    string AniAux;
    cout<<"\n\n\t Raza actual: "<< Animal<<endl;
    cout<<"\t Raza a cambiar: ";
    getline(cin,AniAux);
    Animal=AniAux;
    getline(cin,Animal);
 }

 void Mamifero::CambiarNombre()
 {
    string NomAux;
    cout<<"\n\n\t Nombre de la mascota actual: "<< Nombre<<endl;
    cout<<"\t Nuevo nombre de la mascota : ";
    getline(cin,NomAux);
    Nombre=NomAux;
    getline(cin,Nombre);
 }

 void Mamifero::CambiarLugar()
 {
    string NacAux;
    cout<<"\n\n\t Lugar de nacimiento actual: "<< Nacio<<endl;
    cout<<"\t Correcion de lugar de nacimiento: ";
    getline(cin,NacAux);
    Nacio=NacAux;
    getline(cin,Nacio);
 }

 void Mamifero::CambiarNacimiento()
 {
     int Da,Ma,Aa;
     cout<<"\n\t Dia de nacimiento actual(dd/mm/aaaa): "<<Dia<<"/"<<Mes<<"/"<<Anio<<endl;
     cout<<"\n\t Correcion del dia de nacimiento actual(dd/mm/aaaa): \n\t Dia: ";
     cin >>Da;
     cout<<"\t Mes: ";
     cin >>Ma;
     cout<<"\t Anio: ";
     cin >>Aa;
     Dia=Da;
     Mes=Ma;
     Anio=Aa;
     cout<<"\n\n\t Dia de nacimiento actualizado (dd/mm/aaaa): "<<Dia<<"/"<<Mes<<"/"<<Anio<<endl;
     espacio();
 }

 string Mamifero::ObtieneNombre()
 {
    return Nombre;
 }

 ///FELINO (DERIVADA)
 class Felino: public Mamifero
 {
    private:
        string Habitat, Dieta, Propietario;
    public:
        Felino(string Ani,string Nom,string Nac,int D,int M,int A,string Habi,string Die,string Propie);
        void ImprimeFelino();
        void CambiarPropietario();
        void CambiarHabitat();
 };

 Felino::Felino(string Ani,string Nom,string Nac,int D,int M,int A,string Habi,string Die,string Propie):Mamifero(Ani,Nom,Nac,D,M,A)
 {
    Habitat=Habi;
    Dieta=Die;
    Propietario=Propie;
 }

 void Felino::ImprimeFelino()
 {
    Mamifero::ImprimeMamifero();
    cout<<"\t Propietario: "<<Propietario<<endl;
    cout<<"\t Habitat: "<<Habitat<<endl;
    cout<<"\n\n\n\t DIETA:\n\t Su dieta consiste de "<<Dieta<<" ,dar dos veces al dia"<<endl;
 }

  void Felino::CambiarPropietario()
 {
    string PropieAux;
    cout<<"\n\n\t Propietario de la mascota actual: "<< Propietario<<endl;
    cout<<"\t Nuevo propietario de la mascota : ";
    getline(cin,PropieAux);
    Propietario=PropieAux;
    getline(cin,Propietario);
 }

   void Felino::CambiarHabitat()
 {
    string HabAux;
    cout<<"\n\n\t Lugar donde recidia: "<< Habitat<<endl;
    cout<<"\t Lugar donde recidira: ";
    getline(cin,HabAux);
    Habitat=HabAux;
    getline(cin,Habitat);
 }

 ///GATO (SUBDERIVADA)
 class GatoDomestico: public Felino
 {
    friend class ListaEstatica;

    private:
        string MarcaAlimento;
        float elemento;
    public:
        GatoDomestico(string Ani,string Nom,string Nac,int D,int M,int A,string Habi,string Die,string Propie,string MA,float elem);
        void ImprimeGato();

 };


 GatoDomestico::GatoDomestico(string Ani,string Nom,string Nac,int D,int M,int A,string Habi,string Die,string Propie,string MA,float elem):Felino(Ani,Nom,Nac,D,M,A,Habi,Die,Propie)
 {
    MarcaAlimento=MA;
    elemento=elem;
 }

 void GatoDomestico::ImprimeGato()
 {
    Felino::ImprimeFelino();
    cout<<"\t Preferible de la marca "<<MarcaAlimento<<" ,ya que contiene mas proteina"<<endl;
 }

 ///LISTA ESTATICA
 class ListaEstatica{
 private:
    float datos[TAM];
    int ult;
    float dato;
 public:
    ListaEstatica():ult(-1){}
    bool vacia()const;
    bool llena()const;
    bool inserta(float, int);
    bool elimina(int);
    float recupera(int)const;
    int primero()const;
    int ultimo()const;
    void imprime()const;
    int buscar(float);
 };

 int ListaEstatica::buscar(float elem){
    int i=0, band=0;
    while(i<=ult){
        if(elem ==datos[i]){
            cout<<"\n\n\t Se encontro "<<elem<<" en posicion "<<i+1;
            band=1;
            return i;
        }
        i++;
    }
    if(band==0)
    {
        cout<<"\n\n\t No se encontro "<<elem<<" en ninguna posicion";
    }
    return i;
 }

 void ListaEstatica::imprime()const{
    if(!vacia()){
        for(int i=0; i<=ult; i++){
            cout<<"\n\n\t "<<i+1<<") "<<datos[i]<<endl;
        }
    }
 }

 bool ListaEstatica::vacia()const{
    return ult==-1;
 }
 bool ListaEstatica::llena()const{
    return ult==TAM-1;
 }

 bool ListaEstatica::inserta(float elem, int pos){
    if(llena() || pos<0 || pos>ult+1){
        cout<<"\n\n\t No se pudo insertar";
        return false;
    }
    int i=ult+1;
    while(i>pos){
        datos[i]=datos[i-1];
        i--;
    }
    cout<<"\n\n\t Se guardo "<<elem<<" en posicion "<<i+1;
    datos[pos]=elem;
    ult++;
    return true;
 }

 bool ListaEstatica::elimina(int pos){
     pos=pos-1;
    if(vacia() || pos<0 || pos>ult){
        cout<<"\n\n\t No se pudo eliminar";
        return false;
    }
    int i=pos;
    while(i<ult)
        {
        datos[i]=datos[i+1];
        i++;
        }
        cout<<"\n\n\t Se elimino correctamente";
        ult--;
        return true;
 }

 float ListaEstatica::recupera(int pos)const{
    if(vacia() || pos<0 || pos>ult-1){
        std::cout<<"\n Insuficiencia de datos";
    }
    else{
       return datos[pos];
     }
     return pos;
 }

 int ListaEstatica::primero()const{
    if(vacia()){
       return -1;
    }
    return 0;
 }
 int ListaEstatica::ultimo()const{
    if(vacia()){
       return -1;
    }
     return ult;
 }

 ///FUNCIONES
 void inicio(int cont) //minimizar el main
 {
    cout<<"\n\t\t\t\t V E T E R I N A R I A"<<endl;
    cout<<"\n\t\t\t\t      I N I C I O "<<endl;
    cout<<"\n\t\t\t\t Espacio En Memoria: ["<<cont<<"/"<<TAM<<"]"<<endl;
    cout<<"\n\n\t 1. Agrega"<<endl;
    cout<<"\n\n\t 2. Buscar"<<endl;
    cout<<"\n\n\t 3. Elimina"<<endl;
    cout<<"\n\n\t 4. Ingresa"<<endl;
    cout<<"\n\n\t 5. Muestra"<<endl;
    cout<<"\n\n\t 6. Salir"<<endl;
    cout<<"\n\n\t << ";
 }

 void espacio() // facilitar la estetica del programa para el system pause
 {
    cout<<"\n\n\n\t ";
    system("pause");
 }


 int main()
 {
 //ESTILO DEL PROGRAMA
 system("Color 3f");
 //Declaracion de un objeto tipo GatoDomestico
  GatoDomestico *Gatito;
  Gatito = new GatoDomestico("Gato Albino","Minino","Guadalajara, Mexico",12,06,2000,"Rio Ganges 1041","Pescado","Jose Luis","Whiskas", 0);
  ListaEstatica lista;

 //declaracion de variables
 char menu,sub;
 float elem;
 int cont, pos;
 bool band=false;

 do
 {
     system("cls");
     inicio(cont); cin>>menu;
     switch(menu)
     {
       case '1':
           if(lista.llena())
           {
                cout<<"\n\n\t Ya no puede agregar mas elemento en este mes";
                espacio();
           }
           else
           {
                cout<<"\n\n\t Cantidad de comida consumida: ";cin>>elem;
                lista.inserta(elem,cont); cont++;
                espacio();
           }
           break;

        case '2':
           if(lista.vacia())
           {
                cout<<"\n\n\t Ingrese valores";
                espacio();
           }
           else
           {
                cout<<"\n\n\t Buscar cantidad: ";cin>> elem;
                lista.buscar(elem);
                espacio();
           }
           break;

       case '3':
           if(lista.vacia())
           {
                cout<<"\n\n\t Ingrese valores";
                espacio();
           }
           else
           {
               cout<<"\n\n\t Eliminar dia: ";cin>> pos;
               if(lista.elimina(pos)==true)
               {
                   cont--;
               }
               espacio();
           }
           break;

       case '4':
           if(lista.vacia())
           {
                cout<<"\n\n\t Ingrese valores";
                espacio();
           }
           else if(lista.llena())
           {
               cout<<"\n\n\t Lista llena";
               espacio();
           }
           else
           {
               cout<<"\n\n\t Cantidad de comida consumida: ";cin>> elem;
               cout<<"\n\n\t Insertar dia: ";cin>> pos;
               lista.inserta(elem,pos);
               espacio();
           }
           break;


       case '5':
           if(lista.vacia())
           {
                cout<<"\n\n\t Ingrese valores";
                espacio();
           }
           else
           {
               lista.imprime();
               espacio();
           }
           break;

       case '6':
           system("color CF");
           cout<<"\n\n\t Hasta Luego ;)";
           espacio();
           sub=6;
           return 0;
           break;
     }

 }
 while(menu!=6);
 return 0;
}
